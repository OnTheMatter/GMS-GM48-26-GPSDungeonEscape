<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gps</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-8</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = noone;
open = false;
grid = mp_grid_create(0,0,room_width/640,room_height/480,640,480);
path = path_add();
current_target = "Nothing";
off_x = 185;
off_y = 120;
on_x = sprite_width - 32;
on_y = sprite_height - 24;
key_x = 64;
key_y = 48;
exit_x = 96;
exit_y = 48;
off_button = instance_create(x + off_x,y + off_y,obj_button_off);
off_button.owner = id;
on_button = instance_create(x + on_x,y + on_y,obj_button_on);
on_button.owner = id;
target_key_button = instance_create(x + key_x,y + key_y,obj_button_key);
target_key_button.owner = id;
target_exit_button = instance_create(x + exit_x,y + exit_y, obj_button_exit);
target_exit_button.owner = id;

instance_deactivate_object(off_button);
instance_deactivate_object(target_key_button);
instance_deactivate_object(target_exit_button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (open)
{
    if (target_key_button.output)
    {
        if (owner.key_acquired)
        {
            audio_play_sound(sound_gps_destination_reached,1,0);
        }
        else
        {
            current_target = "Key";
            audio_play_sound(sound_gps_set_key,1,0);
        }
        
    }
    
    if (target_exit_button.output)
    {
        current_target = "Exit";
        audio_play_sound(sound_gps_set_exit,1,0);
    }
    
    if (off_button.output)
    {
        open = false;
        audio_play_sound(sound_gps_off,4,0);
        off_button.output = false;
        instance_deactivate_object(off_button);
        instance_deactivate_object(target_exit_button);
        instance_deactivate_object(target_key_button);
        instance_activate_object(on_button);
    }
}
else
{
    if (on_button.output)
    {
        open = true;
        audio_play_sound(sound_gps_on,4,0);
        on_button.output = false;
        instance_deactivate_object(on_button);
        instance_activate_object(off_button);
        instance_activate_object(target_exit_button);
        instance_activate_object(target_key_button);
    }
}

x = view_xview[0] + (view_wview[0] - sprite_width);
y = view_yview[0] + (view_hview[0] - sprite_height);

if (instance_exists(off_button))
{
    off_button.x = x + off_x;
    off_button.y = y + off_y;
}
if (instance_exists(on_button))
{
    on_button.x = x + on_x;
    on_button.y = y + on_y;
}
if (instance_exists(target_key_button))
{
    target_key_button.x = x + key_x;
    target_key_button.y = y + key_y;
}
if (instance_exists(target_exit_button))
{
    target_exit_button.x = x + exit_x;
    target_exit_button.y = y + exit_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (open)
{
    draw_self();
    draw_set_color(c_black);
    draw_set_font(fnt_normal);
    draw_text(x + 30,y + 30, "Current Target : " + current_target);
    if (current_target == "Key")
    {
        if (instance_exists(obj_key))
        {
            draw_set_color(c_blue);
            var dir = point_direction(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,obj_key.x,obj_key.y);
            draw_arrow(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,view_xview[0] + view_wview[0]/2 + lengthdir_x(96,dir),view_yview[0] + view_hview[0]/2 + lengthdir_y(96,dir),8);        
        }
        else
        {
            current_target = "Nothing";
        }
    
    }
    
    if (current_target == "Exit")
    {
        if (instance_exists(obj_exit))
        {
            draw_set_color(c_blue);
            var dir = point_direction(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,obj_exit.x,obj_exit.y);
            draw_arrow(view_xview[0] + view_wview[0]/2,view_yview[0] + view_hview[0]/2,view_xview[0] + view_wview[0]/2 + lengthdir_x(96,dir),view_yview[0] + view_hview[0]/2 + lengthdir_y(96,dir),8);        
        }
        else
        {
            current_target = "Nothing";
        }
    
    }
}

draw_set_color(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
