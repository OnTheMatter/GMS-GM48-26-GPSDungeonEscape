<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vspd = 0;
hspd = 0;
movement_speed = 2;
running_speed = 5;
normal_movement_speed = 2;
gps = instance_create(0,0,obj_gps);
gps.owner = id;
max_stamina = room_speed * 5;
stamina = max_stamina;
stamina_refill_time = 2 * room_speed;
stamina_refill_timer = 0;
stamina_refill_speed = 1;
target_direction = point_direction(x,y,mouse_x,mouse_y);
r_speed = 16;
key_acquired = false;
secret_key_acquired = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (stamina_refill_timer &gt; 0) stamina_refill_timer--;
if (keyboard_check(vk_shift))
{
    

    if ((stamina &gt; 0) &amp;&amp; (stamina_refill_timer &lt;= 0))
    {
        movement_speed = running_speed;
        stamina--;
        if (stamina &lt;= 0) stamina_refill_timer = stamina_refill_time;
    }
    else
    {
        movement_speed = normal_movement_speed;
    }
}
else
{
    movement_speed = normal_movement_speed;
    if (stamina_refill_timer &lt;= 0) stamina = min(stamina + 1,max_stamina);
}

hspd = ((keyboard_check(vk_right) || keyboard_check(ord("D"))) - (keyboard_check(vk_left) || keyboard_check(ord("A")))) * movement_speed;
vspd = ((keyboard_check(vk_down) || keyboard_check(ord("S"))) - (keyboard_check(vk_up) || keyboard_check(ord("W")))) * movement_speed; 

if (hspd != 0) &amp;&amp; (vspd != 0)
{
    var dist = point_distance(0,0,hspd,vspd);
    hspd /= dist;
    vspd /= dist;
    hspd *= movement_speed;
    vspd *= movement_speed;
}

if (place_meeting(x + hspd,y + vspd, obj_wall))
{
    if (place_meeting(x + hspd,y,obj_wall))
    {
        for (var xx = abs(hspd); xx &gt;= 0; xx--)
        {
            if (!place_meeting(x + (xx * sign(hspd)),y,obj_wall))
            {
                hspd = xx;
                break;
            }
        }
    }
    
    if (place_meeting(x,y + vspd,obj_wall))
    {
        for (var yy = abs(vspd); yy &gt;= 0; yy--)
        {
            if (!place_meeting(x,y + (yy * sign(vspd)),obj_wall))
            {
                vspd = yy;
                break;
            }
        }
    }
}

x += hspd;
y += vspd;

target_direction += dsin(point_direction(x,y,mouse_x,mouse_y) - target_direction) * r_speed;

view_xview[0] = clamp(x - (view_wview/2),0,room_width - view_wview[0]);
view_yview[0] = clamp(y - (view_hview/2),0,room_height - view_hview[0]);

audio_listener_position(x,y,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;
y = yprevious;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,target_direction,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
