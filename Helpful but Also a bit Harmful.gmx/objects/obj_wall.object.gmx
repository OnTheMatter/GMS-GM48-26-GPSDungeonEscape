<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_brick</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//first check for neighbor (horizontal)
var inst = instance_place(x+(image_xscale*32),y,obj_wall);
//if our next neighbor collision object is last exit;
 if (instance_position(x+(image_xscale*32),y,obj_wall)==noone)
   inst = noone;
while (inst!=noone) //repeat
    {
    image_xscale+=1; //set our xscale +1
    with (inst) instance_destroy(); //destroy neighbor

    //check if our neighbor is not last
    if (instance_position(x+(image_xscale*32)+32,y,obj_wall)==noone)
    {
        inst = noone;//if last than break ( checking last because of vertical collision)
        break;
    }
    else
    {
        inst = instance_position(x+(image_xscale*32),y,obj_wall)//find new neighbor
    }
    }
   

///vertical checking

if (image_xscale==1){ //if our xscale doesnot change.
//first check for neighbor (vertically
var inst = instance_place(x,y+(image_yscale*32),obj_wall);

while (inst!=noone)//repeat
    {
    image_yscale+=1; //set our yscale +1
   if (inst.image_xscale==1) //if our neighbor xscale is 1 then destroy it otherwise dont leave.
   with (inst) instance_destroy();
   
    inst = instance_position(x,y+(image_yscale*32),obj_wall) //check for another neighbor
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
